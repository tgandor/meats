--------------------------------------------------------
poker00010.c	-	poker00000.c	 98,04%
	Liczba kafli: 2, Suma d³ugo¶ci: 270
Liczba kafli: 2
1:
Atomy: BUILTINTYPE IDENTIFIER BRACKET BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER IDENTIFIER INTEGER ASSIGNMENT INTEGER CONTROL BRACKET IDENTIFIER ASSIGNMENT INTEGER IDENTIFIER INTEGER IDENTIFIER ARITHMETIC BRACKET IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC INTEGER ARITHMETIC IDENTIFIER IDENTIFIER ARITHMETIC INTEGER CONTROL BRACKET IDENTIFIER ASSIGNMENT INTEGER IDENTIFIER INTEGER IDENTIFIER ARITHMETIC BRACKET CONTROL BRACKET IDENTIFIER BRACKET IDENTIFIER BRACKET RELATION IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET STRING IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET STRING BITWISE IDENTIFIER BRACKET CONTROL BRACKET IDENTIFIER ASSIGNMENT INTEGER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC BRACKET BEGN IDENTIFIER BRACKET STRING BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER BRACKET STRING IDENTIFIER BRACKET END CONTROL INTEGER END 
Fragment pliku poker00010.c
int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2];
	for(i=6; i<47; i++)
		if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	scanf("%d", &C);
	for(i=0;i<C;i++) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans);
	}
	return 0;
}
Fragment pliku poker00000.c
int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2];
	for(i=6; i<47; i++)
		if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	scanf("%d", &C);
	for(i=0;i<C;i++) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans);
	}
	return 0;
}
2:
Atomy: BUILTINTYPE IDENTIFIER BRACKET BUILTINTYPE IDENTIFIER BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER CONTROL BRACKET IDENTIFIER INTEGER BRACKET CONTROL IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER CONTROL BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET BEGN IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER END CONTROL BEGN IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER END IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER CONTROL BRACKET BUILTINTYPE BRACKET IDENTIFIER END 
Fragment pliku poker00010.c
int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	if ( x<6 )
		return FIB[x] % MOD;
	if ( x%2 )
	{
		n = (x-3)/2;
		k = 3;
	}
	else 
	{
		n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}
Fragment pliku poker00000.c
int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	if ( x<6 )
		return FIB[x] % MOD;
	if ( x%2 )
	{
		n = (x-3)/2;
		k = 3;
	}
	else 
	{
		n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}
Warto¶ci metryk: 
    52 -   50       96,15 %
    34 -   33       97,06 %
     3 -    3      100,00 %
     0 -    0         --- %
     3 -    3      100,00 %
     1 -    1      100,00 %
     7 -    7      100,00 %
     6 -    6      100,00 %
     8 -    8      100,00 %
    18 -   18      100,00 %
   106 -  105       99,06 %
    18 -   18      100,00 %
--------------------------------------------------------
poker00011.c	-	poker00001.c	 92,10%
	Liczba kafli: 4, Suma d³ugo¶ci: 257
Liczba kafli: 4
1:
Atomy: BUILTINTYPE IDENTIFIER BRACKET BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER IDENTIFIER INTEGER ASSIGNMENT INTEGER CONTROL BRACKET IDENTIFIER ASSIGNMENT INTEGER IDENTIFIER INTEGER IDENTIFIER ARITHMETIC BRACKET IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC INTEGER ARITHMETIC IDENTIFIER IDENTIFIER ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER CONTROL BRACKET IDENTIFIER INTEGER BRACKET BEGN CONTROL BRACKET IDENTIFIER BRACKET IDENTIFIER BRACKET RELATION IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET STRING IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC END IDENTIFIER BRACKET STRING BITWISE IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT INTEGER CONTROL BRACKET IDENTIFIER IDENTIFIER BRACKET BEGN IDENTIFIER BRACKET STRING BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER BRACKET STRING IDENTIFIER BRACKET IDENTIFIER ARITHMETIC END CONTROL INTEGER END 
Fragment pliku poker00011.c
int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2];
	i=6; 
	while(i<47)
	{
		if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	    i++;
	}
	scanf("%d", &C);
	i=0;
	while(i<C) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans);
		i++;
	}
	return 0;
}
Fragment pliku poker00001.c
int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2];
	i=6; 
	while(i<47)
	{
		if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	    i++;
	}
	scanf("%d", &C);
	i=0;
	while(i<C) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans);
		i++;
	}
	return 0;
}
2:
Atomy: IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER END IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER CONTROL BRACKET BUILTINTYPE BRACKET IDENTIFIER END 
Fragment pliku poker00011.c
n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}
Fragment pliku poker00001.c
n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}
3:
Atomy: BUILTINTYPE IDENTIFIER BRACKET BUILTINTYPE IDENTIFIER BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER CONTROL BRACKET IDENTIFIER INTEGER BRACKET 
Fragment pliku poker00011.c
int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	if ( x<6 )
Fragment pliku poker00001.c
int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	switch ( x<6 )
4:
Atomy: IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER 
Fragment pliku poker00011.c
n = (x-3)/2;
		k = 3
Fragment pliku poker00001.c
n = (x-3)/2;
		k = 3
Warto¶ci metryk: 
    58 -   59       98,31 %
    34 -   34      100,00 %
     1 -    1      100,00 %
     2 -    2      100,00 %
     3 -    1       33,33 %
     1 -    0         --- %
     7 -    7      100,00 %
     6 -    6      100,00 %
     8 -    8      100,00 %
    18 -   18      100,00 %
   106 -  105       99,06 %
    18 -   18      100,00 %
--------------------------------------------------------
poker00011.c	-	poker00010.c	 92,07%
	Liczba kafli: 4, Suma d³ugo¶ci: 257
Liczba kafli: 4
1:
Atomy: END CONTROL INTEGER END BUILTINTYPE IDENTIFIER BRACKET BUILTINTYPE IDENTIFIER BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER CONTROL BRACKET IDENTIFIER INTEGER BRACKET CONTROL IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER CONTROL BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET BEGN IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER END CONTROL BEGN IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER END IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER CONTROL BRACKET BUILTINTYPE BRACKET IDENTIFIER END 
Fragment pliku poker00011.c
}
	return 0;
}

int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	if ( x<6 )
		return FIB[x] % MOD;
	if ( x%2 )
	{
		n = (x-3)/2;
		k = 3;
	}
	else 
	{
		n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}
Fragment pliku poker00010.c
}
	return 0;
}

int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	if ( x<6 )
		return FIB[x] % MOD;
	if ( x%2 )
	{
		n = (x-3)/2;
		k = 3;
	}
	else 
	{
		n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}
2:
Atomy: BUILTINTYPE IDENTIFIER INTEGER BUILTINTYPE IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER BRACKET BUILTINTYPE BRACKET BUILTINTYPE IDENTIFIER BRACKET BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER IDENTIFIER INTEGER ASSIGNMENT INTEGER CONTROL BRACKET IDENTIFIER ASSIGNMENT INTEGER IDENTIFIER INTEGER IDENTIFIER ARITHMETIC BRACKET IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC INTEGER ARITHMETIC IDENTIFIER IDENTIFIER ARITHMETIC INTEGER 
Fragment pliku poker00011.c
int FIB[47];
int MOD = INT_MAX;

fib(int);

int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2
Fragment pliku poker00010.c
int FIB[47];
int MOD = INT_MAX;

fib(int);

int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2
3:
Atomy: BRACKET BEGN IDENTIFIER BRACKET STRING BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER BRACKET STRING IDENTIFIER BRACKET 
Fragment pliku poker00011.c
) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans)
Fragment pliku poker00010.c
) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans)
4:
Atomy: CONTROL BRACKET IDENTIFIER BRACKET IDENTIFIER BRACKET RELATION IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET STRING IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER 
Fragment pliku poker00011.c
if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	    i
Fragment pliku poker00010.c
if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	scanf
Warto¶ci metryk: 
    58 -   52       89,66 %
    34 -   34      100,00 %
     1 -    3       33,33 %
     2 -    0         --- %
     3 -    3      100,00 %
     1 -    1      100,00 %
     7 -    7      100,00 %
     6 -    6      100,00 %
     8 -    8      100,00 %
    18 -   18      100,00 %
   106 -  106      100,00 %
    18 -   18      100,00 %
--------------------------------------------------------
poker00011.c	-	poker00000.c	 89,38%
	Liczba kafli: 4, Suma d³ugo¶ci: 242
Liczba kafli: 4
1:
Atomy: BUILTINTYPE IDENTIFIER BRACKET BUILTINTYPE IDENTIFIER BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER CONTROL BRACKET IDENTIFIER INTEGER BRACKET CONTROL IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER CONTROL BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET BEGN IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER END CONTROL BEGN IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER END IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER CONTROL BRACKET BUILTINTYPE BRACKET IDENTIFIER END 
Fragment pliku poker00011.c
int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	if ( x<6 )
		return FIB[x] % MOD;
	if ( x%2 )
	{
		n = (x-3)/2;
		k = 3;
	}
	else 
	{
		n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}
Fragment pliku poker00000.c
int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	if ( x<6 )
		return FIB[x] % MOD;
	if ( x%2 )
	{
		n = (x-3)/2;
		k = 3;
	}
	else 
	{
		n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}
2:
Atomy: BRACKET BEGN IDENTIFIER BRACKET STRING BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER BRACKET STRING IDENTIFIER BRACKET 
Fragment pliku poker00011.c
) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans)
Fragment pliku poker00000.c
) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans)
3:
Atomy: BUILTINTYPE IDENTIFIER BRACKET BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER IDENTIFIER INTEGER ASSIGNMENT INTEGER CONTROL BRACKET IDENTIFIER ASSIGNMENT INTEGER IDENTIFIER INTEGER IDENTIFIER ARITHMETIC BRACKET IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC INTEGER ARITHMETIC IDENTIFIER IDENTIFIER ARITHMETIC INTEGER 
Fragment pliku poker00011.c
int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2
Fragment pliku poker00000.c
int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2
4:
Atomy: CONTROL BRACKET IDENTIFIER BRACKET IDENTIFIER BRACKET RELATION IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET STRING IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER 
Fragment pliku poker00011.c
if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	    i
Fragment pliku poker00000.c
if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	scanf
Warto¶ci metryk: 
    58 -   50       86,21 %
    34 -   33       97,06 %
     1 -    3       33,33 %
     2 -    0         --- %
     3 -    3      100,00 %
     1 -    1      100,00 %
     7 -    7      100,00 %
     6 -    6      100,00 %
     8 -    8      100,00 %
    18 -   18      100,00 %
   106 -  105       99,06 %
    18 -   18      100,00 %
--------------------------------------------------------
poker00001.c	-	poker00000.c	 84,06%
	Liczba kafli: 5, Suma d³ugo¶ci: 234
Liczba kafli: 5
1:
Atomy: IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER END IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER CONTROL BRACKET BUILTINTYPE BRACKET IDENTIFIER END BUILTINTYPE IDENTIFIER BRACKET BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER IDENTIFIER INTEGER ASSIGNMENT INTEGER CONTROL BRACKET IDENTIFIER ASSIGNMENT INTEGER IDENTIFIER INTEGER IDENTIFIER ARITHMETIC BRACKET IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC INTEGER ARITHMETIC IDENTIFIER IDENTIFIER ARITHMETIC INTEGER 
Fragment pliku poker00001.c
n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}

int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2
Fragment pliku poker00000.c
n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}

int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2
2:
Atomy: BRACKET BEGN IDENTIFIER BRACKET STRING BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER BRACKET STRING IDENTIFIER BRACKET 
Fragment pliku poker00001.c
) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans)
Fragment pliku poker00000.c
) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans)
3:
Atomy: BUILTINTYPE IDENTIFIER INTEGER BUILTINTYPE IDENTIFIER ASSIGNMENT IDENTIFIER BUILTINTYPE IDENTIFIER BRACKET BUILTINTYPE IDENTIFIER BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER CONTROL BRACKET IDENTIFIER INTEGER BRACKET 
Fragment pliku poker00001.c
int FIB[47];
int MOD = INT_MAX;

int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	switch ( x<6 )
Fragment pliku poker00000.c
int FIB[47];
int MOD = INT_MAX;

int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	if ( x<6 )
4:
Atomy: CONTROL BRACKET IDENTIFIER BRACKET IDENTIFIER BRACKET RELATION IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET STRING IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER 
Fragment pliku poker00001.c
if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	    i
Fragment pliku poker00000.c
if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	scanf
5:
Atomy: IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER 
Fragment pliku poker00001.c
n = (x-3)/2;
		k = 3
Fragment pliku poker00000.c
n = (x-3)/2;
		k = 3
Warto¶ci metryk: 
    59 -   50       84,75 %
    34 -   33       97,06 %
     1 -    3       33,33 %
     2 -    0         --- %
     1 -    3       33,33 %
     0 -    1         --- %
     7 -    7      100,00 %
     6 -    6      100,00 %
     8 -    8      100,00 %
    18 -   18      100,00 %
   105 -  105      100,00 %
    18 -   18      100,00 %
--------------------------------------------------------
poker00010.c	-	poker00001.c	 82,80%
	Liczba kafli: 6, Suma d³ugo¶ci: 227
Liczba kafli: 6
1:
Atomy: IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER END IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET IDENTIFIER ASSIGNMENT IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER CONTROL BRACKET BUILTINTYPE BRACKET IDENTIFIER END 
Fragment pliku poker00010.c
n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}
Fragment pliku poker00001.c
n = (x-2)/2;
		k = 2;
	}
	fn1 = fib(n+1);
	fn = fib(n);
	
	ret = (long long) FIB[k] * fn1 % MOD;
	ret = ret * fn1 % MOD;
	ret = (ret + (long long)fn1*fn*FIB[k-1]) % MOD;
	ret = (ret + (long long)fn*fn*FIB[k-2]) % MOD;
	return (int)ret;
}
2:
Atomy: BRACKET BEGN IDENTIFIER BRACKET STRING BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BITWISE IDENTIFIER BRACKET IDENTIFIER ASSIGNMENT BRACKET BUILTINTYPE BUILTINTYPE BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER ARITHMETIC IDENTIFIER IDENTIFIER BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER BRACKET STRING IDENTIFIER BRACKET 
Fragment pliku poker00010.c
) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans)
Fragment pliku poker00001.c
) { 
		scanf("%d%d%d%d", &a, &b, &n, &MOD);
		ans = (long long) a * fib(n+1) % MOD + b * fib(n+2) % MOD;
		ans %= MOD;
		printf("%lld\n", ans)
3:
Atomy: BUILTINTYPE IDENTIFIER BRACKET BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER IDENTIFIER INTEGER ASSIGNMENT INTEGER CONTROL BRACKET IDENTIFIER ASSIGNMENT INTEGER IDENTIFIER INTEGER IDENTIFIER ARITHMETIC BRACKET IDENTIFIER IDENTIFIER ASSIGNMENT IDENTIFIER IDENTIFIER ARITHMETIC INTEGER ARITHMETIC IDENTIFIER IDENTIFIER ARITHMETIC INTEGER 
Fragment pliku poker00010.c
int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2
Fragment pliku poker00001.c
int main()
{
	int i,C,a,b,n;
	long long ans;
	FIB[1]=1; for(i=2; i<47; i++) FIB[i] = FIB[i-1] + FIB[i-2
4:
Atomy: CONTROL BRACKET IDENTIFIER BRACKET IDENTIFIER BRACKET RELATION IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET STRING IDENTIFIER IDENTIFIER BRACKET IDENTIFIER BRACKET IDENTIFIER IDENTIFIER BRACKET IDENTIFIER 
Fragment pliku poker00010.c
if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	scanf
Fragment pliku poker00001.c
if (fib(i) != FIB[i])
			printf("%d! jest: %d, powinno: %d\n", i, fib(i), FIB[i]);
	    i
5:
Atomy: BUILTINTYPE IDENTIFIER BRACKET BUILTINTYPE IDENTIFIER BRACKET BEGN BUILTINTYPE IDENTIFIER IDENTIFIER IDENTIFIER IDENTIFIER BUILTINTYPE BUILTINTYPE IDENTIFIER CONTROL BRACKET IDENTIFIER INTEGER BRACKET 
Fragment pliku poker00010.c
int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	if ( x<6 )
Fragment pliku poker00001.c
int fib(int x)
{
	int n,k,fn1,fn;
	long long ret;
	switch ( x<6 )
6:
Atomy: IDENTIFIER ASSIGNMENT BRACKET IDENTIFIER ARITHMETIC INTEGER BRACKET ARITHMETIC INTEGER IDENTIFIER ASSIGNMENT INTEGER 
Fragment pliku poker00010.c
n = (x-3)/2;
		k = 3
Fragment pliku poker00001.c
n = (x-3)/2;
		k = 3
Warto¶ci metryk: 
    52 -   59       88,14 %
    34 -   34      100,00 %
     3 -    1       33,33 %
     0 -    2         --- %
     3 -    1       33,33 %
     1 -    0         --- %
     7 -    7      100,00 %
     6 -    6      100,00 %
     8 -    8      100,00 %
    18 -   18      100,00 %
   106 -  105       99,06 %
    18 -   18      100,00 %
